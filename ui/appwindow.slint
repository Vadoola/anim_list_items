import { Button, VerticalBox , ListView } from "std-widgets.slint";

export struct mod_str {
    text: string,
    hidden: bool,
}

export component AppWindow inherits Window {
    in property <[mod_str]> list_mod;
    out property<bool> hide: false;

    callback up_mod();
    VerticalBox {
        Button {
            text: "Toggle";
            clicked => {
                hide = !hide;
                up_mod();
            }
        }
        ListView {
            width: 100%;
            height: 200px;
            for data in list_mod : Rectangle {
                height: 30px;
                Rectangle {
                    property<int> test-init: 0;

                    height: 25px;
                    width: 90%;
                    //background: blue;
                    opacity: 100;
                    Text {
                        text: data.text;
                    }
                    states [
                        hd when (hide && data.hidden) : {
                            //opacity: 0;
                            background: red;
                            //x: -self.width;

                            /*out {
                                animate opacity, background {
                                    duration: 1000ms;
                                    easing: ease-in-out;
                                }
                            }*/
                            in {
                                animate * {
                                    duration: 1000ms;
                                    easing: ease-in-out;
                                }
                            }
                        }

                        nhd when !(hide && data.hidden) : {
                            //opacity: 100;
                            background: blue;
                            //x: 0;

                            in {
                                animate * {
                                    delay: 2000ms;
                                    duration: 1000ms;
                                    easing: ease-in-out;
                                }
                            }
                            /*out {
                                animate opacity, background {
                                    duration: 1000ms;
                                    easing: ease-in-out;
                                }
                            }*/
                        }
                    ]
                }
            }
        }
    }
}
